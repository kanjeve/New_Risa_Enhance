
            // shellintegrationのアクティベーション
            await new Promise<void>(resolve => {
                const shellIntegrationDisposable = vscode.window.onDidChangeTerminalShellIntegration(e => {
                    if (e.terminal === currentAsirTerminal && e.shellIntegration) {
                        console.log("DEBUG: Shell integration activated for Risa/Asir Debug terminal.");
                        shellIntegrationDisposable.dispose();
                        resolve();
                    }
                });
                setTimeout(() => {
                    shellIntegrationDisposable.dispose();
                    console.warn("DEBUG: Shell integration activation timed out. Proceeding with sendText for initial command.");
                    resolve();
                }, 20000);
            });

            // readを読む
            if (currentAsirTerminal && currentAsirTerminal.shellIntegration) {
                console.log(`DEBUG: Sending initial Risa/Asir command via shellIntegration. Waiting for Risa/Asir prompt...`);
                const exection = await currentAsirTerminal.shellIntegration.executeCommand(commandLine);
                const stream = exection.read();
                let outputBuffer = '';
                const promptRegex = /\[\d+\]\s*$/;
                const finalStartupMessage = "http://www.math.kobe-u.ac.jp/OpenXM/Current/doc/index-doc.html";

                for await (const data of stream) {
                    outputBuffer += data;

                    if(outputBuffer.match(promptRegex) || outputBuffer.includes(finalStartupMessage)) {
                        console.log("DEBUG: Risa/Asir prompt/startup message detected via read() stream.");
                        break;
                    }
                }
                console.log(`DEBUG: Finished reading initial Risa/Asir output.`);

            } else {
                console.warn("DEBUG: Shell integration not available or timed out for initial command. Sending initial command via sendText.");
                currentAsirTerminal?.sendText(commandLine);
                await new Promise(resolve => setTimeout(resolve, 2500)); 
            }
            
        } else {
            // デバッグセッションがアクティブな場合
            vscode.window.showInformationMessage('Existing Risa/Asir debug session found. Loading code into it.');
            currentAsirTerminal.show(true);
            if (currentAsirTerminal.shellIntegration) {
                console.log("DEBUG: Existing session. Waiting for prompt before loading code...");
                const execution = await currentAsirTerminal.shellIntegration.executeCommand(';'); 
                const stream = execution.read();
                let outputBuffer = '';
                const promptRegex = /\[\d+\]\s*$/;
                let promptDetected = false;
                const timeoutPromise = new Promise<void>(resolve => setTimeout(resolve, 5000)); // 5秒
                const readPromise = (async () => {
                    for await (const data of stream) {
                        outputBuffer += data;
                        if (outputBuffer.match(promptRegex)) {
                            promptDetected = true;
                            break;
                        }
                    }
                })();
                await Promise.race([readPromise, timeoutPromise]); // どちらか早い方を待つ
                if (!promptDetected) {
                    console.warn("DEBUG: Prompt not detected in existing session within timeout. Proceeding with load command.");
                }
            } else {
                // shellIntegration が使えない場合は setTimeout で待機
                await new Promise(resolve => setTimeout(resolve, 500)); 
            }
        }

        // 一時ファイルのパスを読み込めるように変換
        let loadCommand: string;
        const currentOsPlatform = process.platform;
        const config = vscode.workspace.getConfiguration('risaasirExecutor', document.uri);
        const useWslFromWindows = config.get<boolean>('useWslFromWindows', false);

        if (currentOsPlatform === 'win32' && useWslFromWindows) {
            const wslTempFilePath = convertWindowsPathToWsl(windowsTempFilePath);
            loadCommand = `load("${wslTempFilePath}");`;
        } else {
            loadCommand = `load("${windowsTempFilePath.replace(/\\/g, '/')}");`;
        }

        // loadコマンドを送信
        asirOutputChannel.appendLine(`> ${loadCommand}`);
        if (currentAsirTerminal && currentAsirTerminal.shellIntegration) {
            await currentAsirTerminal.shellIntegration.executeCommand(loadCommand);
            console.log(`DEBUG: Load command sent via shellIntegration.`);
        } else {
            currentAsirTerminal?.sendText(loadCommand);
            console.warn("DEBUG: Shell integration not available for load command. Sent via sendText.");
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        vscode.window.showInformationMessage('Code loaded for debugging. Call your function (e.g., `myfunc(1);`) in the "Risa/Asir Debug" terminal and use Ctrl+C then "d" to enter debug mode.');
        

        

        // read()待機
            if (currentAsirTerminal.shellIntegration) {
                console.log(`DEBUG: Sending initial Risa/Asir command via shellIntegration. Waiting for Risa/Asir prompt...`);

                const exection = await currentAsirTerminal.shellIntegration.executeCommand(commandLine);
                console.log(`DEBUG: Initial command execution object obtained.`);

                const stream = exection.read();

                let outputBuffer = '';
                const promptRegex = /\[\d+\]\s*$/;
                const finalStartupMessage = "http://www.math.kobe-u.ac.jp/OpenXM/Current/doc/index-doc.html";

                let promptDetected = false;

                // プロンプト検出
                const promptDetectionPromise = new Promise<void>(async resolve => {
                    const timeout = setTimeout(() => {
                        console.warn("DEBUG: Risa/Asir prompt detection timed out. Proceeding without explicit prompt confirmation.");
                        resolve();
                    }, 15000);

                    try {
                        for await (const data of stream) {
                        outputBuffer += data;

                            if(outputBuffer.match(promptRegex) || outputBuffer.includes(finalStartupMessage)) {
                                console.log("DEBUG: Risa/Asir prompt/startup message detected via read() stream.");
                                promptDetected = true;
                                clearTimeout(timeout);
                                resolve();
                                break;
                            }
                        }
                    } catch (readError: any) {
                        console.error(`DEBUG: Error reading terminal stream: ${readError.message}`);
                        clearTimeout(timeout);
                        resolve();
                    }

                    // プロンプトが見つからなかった場合
                    if (!promptDetected) {
                        console.warn("DEBUG: Risa/Asir prompt stream ended without detecting prompt within timeout.");
                        clearTimeout(timeout);
                        resolve();
                    }
                });
                
                await promptDetectionPromise;

            } else {
                console.warn("DEBUG: Shell integration not available. Falling back to setTimeout for initial command.");
                currentAsirTerminal?.sendText(commandLine);
                await new Promise(resolve => setTimeout(resolve, 2500)); 
            }
            
        } else {
            // デバッグセッションがアクティブな場合
            vscode.window.showInformationMessage('Existing Risa/Asir debug session found. Loading code into it.');
            currentAsirTerminal.show(true);
            if (currentAsirTerminal.shellIntegration) {
                console.log("DEBUG: Existing session. Waiting for prompt before loading code...");
                const execution = await currentAsirTerminal.shellIntegration.executeCommand(';'); 
                const stream = execution.read();
                let outputBuffer = '';
                const promptRegex = /\[\d+\]\s*$/;
                let promptDetected = false;

                const promptWaitPromise = new Promise<void>(async resolve => {
                    const timeout = setTimeout(() => {
                        console.warn("DEBUG: Prompt detection in existing session timed out.");
                        resolve();
                    }, 5000);

                    try {
                        for await (const data of stream) {
                            outputBuffer += data;
                            if (outputBuffer.match(promptRegex)) {
                                promptDetected = true;
                                clearTimeout(timeout);
                                resolve();
                                break;
                            }
                        }
                    } catch (readError: any) {
                        console.error(`DEBUG: Error reading existing session stream: ${readError.message}`);
                        clearTimeout(timeout);
                        resolve();
                    }
                    if (!promptDetected) {
                        console.warn("DEBUG: Prompt stream ended in existing session without detecting prompt.");
                        clearTimeout(timeout);
                        resolve();
                    }
                });
                await promptWaitPromise;
            } else {
                await new Promise(resolve => setTimeout(resolve, 500)); 
            }
        }

        // 一時ファイルのパスを読み込めるように変換
        let loadCommand: string;
        const currentOsPlatform = process.platform;
        const config = vscode.workspace.getConfiguration('risaasirExecutor', document.uri);
        const useWslFromWindows = config.get<boolean>('useWslFromWindows', false);

        if (currentOsPlatform === 'win32' && useWslFromWindows) {
            const wslTempFilePath = convertWindowsPathToWsl(windowsTempFilePath);
            loadCommand = `load("${wslTempFilePath}");`;
        } else {
            loadCommand = `load("${windowsTempFilePath.replace(/\\/g, '/')}");`;
        }

        // loadコマンドを送信
        asirOutputChannel.appendLine(`> ${loadCommand}`);
        if (currentAsirTerminal && currentAsirTerminal.shellIntegration) {
            await currentAsirTerminal.shellIntegration.executeCommand(loadCommand);
            console.log(`DEBUG: Load command sent via shellIntegration.`);
        } else {
            currentAsirTerminal?.sendText(loadCommand);
            console.warn("DEBUG: Shell integration not available for load command. Sent via sendText.");
            await new Promise(resolve => setTimeout(resolve, 500));
        }
